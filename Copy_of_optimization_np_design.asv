for 
% TCR Params (Clusters)
rSurf = 1000;

cluster_radius = 50;
tcr_per_cluster = n;
num_tcr = 20*15;
num_clusters = 300/n;
tcr_params_cluster = [rSurf, num_clusters, cluster_radius, tcr_per_cluster, num_tcr];

DifC = @(vh,np_radius, koff) abs( NP_surface_binding(vh, np_radius,np_rho, k0, kon, koff, tcr_params_cluster, 0)-NP_surface_binding(vh, np_radius,np_rho, k0, kon, koff, tcr_params_uniform, 0));
vh_max=100;
np_radius_max=500;
int=1;
G1=linspace(1,vh_max,vh_max);
G2=linspace(50,np_radius_max, 10);
a=linspace(-1,2,10);
G3=10.^a;
f_max=-1e+10;
f_min=10000;
nR=5;

%for r=1:nR
t=1;
DIFC=[];
for i=1:100
    for j=1:10
        for h=1:length(a)

      DIFC(t)=  ( NP_surface_binding([G1(i), G2(j),np_rho],[ k0, kon, G3(h)], tcr_params_cluster, 0)-NP_surface_binding([G1(i), G2(j),np_rho], [k0, kon, G3(h)], tcr_params_uniform, 0));
      
      if DIFC(t)>=f_max
            f_max=DIFC(t);
            vh_c=G1(i);
            np_radius_c=G2(j);
            k0ff_c=G3(h);
      end
        if DIFC(t)<=f_min
            f_min=DIFC(t);
            vh_s=G1(i);
            np_radius_s=G2(j);
            k0ff_s=G3(h); 
        end
        t=t+1
        end
    end
    
end
   % G1=linspace(vh_c- (vh_max)/2,vh_c+ (vh_max)/2,vh_max/int);
   % G2=linspace( np_radius_c- (np_radius_max-9)/2, np_radius_c+ (np_radius_max-9)/2,np_radius_max/(10));
%G3=linspace(vh_c- (999/9)/2,vh_c+ (vh_max)/2,vh_max/int);




%%             
function [bind_freq, nt_bound, nt_pd] = NP_surface_binding(np_params, kinetic_params, tcr_params, plt)
    % TCR Params
    rSurf = tcr_params(1);
    num_clusters = tcr_params(2);
    cluster_radius = tcr_params(3);
    tcr_per_cluster = tcr_params(4);
    num_tcr = tcr_params(5);

    % Kinetic Params
    k0= kinetic_params(1);
    kon=kinetic_params(2);
    koff=kinetic_params(3);

    % NP Params
    vh = np_params(1);
    np_radius = np_params(2);
    np_rho = np_params(3);

    nt = [1:50];                                                            % Define range of covered TCRs to consider
    
    % Probability of covering i TCRs (before binding):
    nt_pd = pdf_CovTCR(rSurf, num_tcr, num_clusters, cluster_radius, tcr_per_cluster, np_radius);
    nt_pd(1) = [];                                                          % Remove first element corresponding to nt=0
    nt_pd(length(nt)+1:end)=[];                                             % Remove elements outside of range
    
    % Compute NP avidity
    Kav = [];
    for i = nt
        K = np_avidity(vh,i,k0,kon,koff);
        Kav = [Kav,K];
    end
    
    % Probability of binding (as function of avidity)
    p_bind = np_rho*Kav ./ (1 + np_rho * Kav);

    % Probability of covering i TCRs (after binding)
    nt_bound = nt_pd .* p_bind;
    
    % Probability of NP binding (regardless of avidity)
    bind_freq = sum(nt_bound);

    if plt
        figure()
        subplot(211)
        plot(nt, nt_pd, 'r-','Displayname','Pre-Bind')
        hold on
        plot(nt, nt_bound, 'g-','Displayname','Post-Bind')
        xlabel('TCRs covered by NP')
        ylabel('Probability')
        legend()
        title(['Cluster Landscape: P_{bind} =',num2str(bind_freq)])

        subplot(212)
        plot(nt, p_bind, 'b-','Displayname','Bind Prob.')
        xlabel('TCRs covered by NP')
        ylabel('Probability')
        legend()
    end
end

function Kav = np_avidity(vh,nt,k0,kon,koff)
    if nt == 0
        Kav = 0;
        return
    end
    
    N = min(vh,nt);
    i = [1:N-1];
    f0 = k0*vh*nt;
    f = kon.*(vh-i).*(nt-i);
    f = [f0,f];
    b = [1:N] .* koff;

    Kav = cumsum(f./b);
    Kav = Kav(end);
end